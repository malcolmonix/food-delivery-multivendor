name: Deploy Chop Chop & MenuVerse Platform

on:
  push:
    branches: [main, production, integrate-menuverse-api]
  pull_request:
    branches: [main]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  test:
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        service: [chopchop, menuverse, admin, api, sqlite-backend]
        include:
          - service: chopchop
            directory: multivendor-web
          - service: menuverse
            directory: MenuVerse
          - service: admin
            directory: multivendor-admin
          - service: api
            directory: dev-backend
          - service: sqlite-backend
            directory: sqlite-backend
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: '${{ matrix.directory }}/package-lock.json'
      
      - name: Install dependencies
        working-directory: ./${{ matrix.directory }}
        run: |
          if [ -f package-lock.json ]; then
            npm ci
          elif [ -f yarn.lock ]; then
            yarn install --frozen-lockfile
          else
            npm install
          fi
      
      - name: Run linting
        working-directory: ./${{ matrix.directory }}
        run: |
          if npm run lint --if-present; then
            echo "‚úÖ Linting passed for ${{ matrix.service }}"
          else
            echo "‚ö†Ô∏è Linting not available or failed for ${{ matrix.service }}"
          fi
      
      - name: Run tests
        working-directory: ./${{ matrix.directory }}
        run: |
          if npm run test --if-present; then
            echo "‚úÖ Tests passed for ${{ matrix.service }}"
          else
            echo "‚ö†Ô∏è Tests not available for ${{ matrix.service }}"
          fi

  build:
    needs: test
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    
    strategy:
      matrix:
        service: [chopchop, menuverse, admin, api, sqlite-backend]
        include:
          - service: chopchop
            directory: multivendor-web
            name: "Chop Chop Customer App"
          - service: menuverse
            directory: MenuVerse
            name: "MenuVerse Restaurant Platform"
          - service: admin
            directory: multivendor-admin
            name: "Admin Management Panel"
          - service: api
            directory: dev-backend
            name: "GraphQL API Server"
          - service: sqlite-backend
            directory: sqlite-backend
            name: "SQLite Backend Service"
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      
      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-${{ matrix.service }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}
          labels: |
            org.opencontainers.image.title=${{ matrix.name }}
            org.opencontainers.image.description=${{ matrix.name }} for Food Delivery Platform
      
      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: ./${{ matrix.directory }}
          file: ./${{ matrix.directory }}/Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  deploy:
    needs: build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/production'
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      
      - name: Deploy to VPS
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USERNAME }}
          key: ${{ secrets.VPS_SSH_KEY }}
          port: ${{ secrets.VPS_PORT || 22 }}
          script: |
            cd /opt/chopchop-menuverse-platform
            
            # Create backup
            echo "üì¶ Creating backup..."
            docker-compose down
            sudo cp -r . ../platform-backup-$(date +%Y%m%d_%H%M%S)
            
            # Pull latest code
            echo "üì• Pulling latest code..."
            git pull origin ${{ github.ref_name }}
            
            # Pull latest images
            echo "üê≥ Pulling latest Docker images..."
            docker-compose pull
            
            # Update containers with zero downtime
            echo "üöÄ Deploying services..."
            docker-compose up -d --remove-orphans
            
            # Wait for services to be ready
            echo "‚è≥ Waiting for services to start..."
            sleep 60
            
            # Health check
            echo "üè• Running health checks..."
            if curl -f http://localhost/health; then
              echo "‚úÖ Chop Chop platform deployment successful"
              # Clean up old images
              docker image prune -f
              # Remove old backups (keep last 5)
              sudo ls -t ../platform-backup-* | tail -n +6 | xargs -r sudo rm -rf
            else
              echo "‚ùå Health check failed, rolling back"
              docker-compose down
              sudo cp -r ../platform-backup-$(ls -t ../platform-backup-* | head -n1)/* .
              docker-compose up -d
              exit 1
            fi

  notify:
    needs: [deploy]
    runs-on: ubuntu-latest
    if: always()
    
    steps:
      - name: Notify deployment status
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          channel: '#deployments'
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}
          text: |
            üçï Chop Chop & MenuVerse Platform Deployment
            Status: ${{ job.status }}
            Branch: ${{ github.ref_name }}
            Commit: ${{ github.sha }}
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}
        if: env.SLACK_WEBHOOK_URL != ''